[
["section-introduction.html", "PRISM: PROGRAMMABLE INTERFACE FOR STATISTICAL &amp; SIMULATION MODELS 1 Introduction", " PRISM: PROGRAMMABLE INTERFACE FOR STATISTICAL &amp; SIMULATION MODELS Ainsleigh Hill University of British Columbia 1 Introduction PRISM is a platform that makes decision-analytics and clinical prediction models accessible on the cloud. PRISM enables end-users to interact with the model they are interested in, without worrying about having the required hardware resources, or setting up complex code on their computer. In its current implementation, PRISM can host models created in R, and can be accessed through Microsoft Excel and R. PRISM Introduction. "],
["section-api.html", "2 Application Programming Interface (API) What is an API? REST Diving in", " 2 Application Programming Interface (API) This section is geared towards people who are less familiar with APIs, or who want a refresher. If you are comfortable with APIs and don’t need a review, you can skip to the next section. What is an API? &nbsp;&nbsp;&nbsp; Client You are the Client Suppose you are at home, on your laptop, and you want to use a cool new piece of software that you found on the internet. Let's say the software is written in the R language. What if you don't have R on your computer? You could install R, but maybe you don't want to. Or what if you actually want to use the software in a different language, like Python? Or maybe you want to use it in several different languages? This is what an API is for. &nbsp;&nbsp;&nbsp; Server PRISM is on the Server Server is a word used a lot in programming, and all it means is computer. In this context, the server is the computer you will be connecting to; it is the computer with the software that you want to use. API communicates We can use the API to communicate between the Client and the Server. In the example above, you could use the API to use an R software package that lives on a computer (Server) somewhere else, without having to download or use R on your computer. REST REST stands for REpresentational State Transfer. Ah yes, clear as mud. I understand the words individually, but… REST is basically the rules for how the client (your computer) can talk to the server (the computer with PRISM, say). It is the rules for the API. REST is a simple language. It isn’t like English, or French, or Mandarin. It only has 4 words! So much easier to be bilingual… The 4 words are: GET, POST, PUT, and DELETE. Simple, right? It turns out, the difficulty comes in defining the words. The official definitions are fairly broad and rather vague, when in practice the use of the words depend on: a) context and b) general rules of thumb. A bit like English after all! GET When using an API, you have 2 options: you may send some data, and receive something back, or you can just receive something back. GET is the function where you just receive data. For this tutorial, we are going to use the Google Books API, which I chose because it has good documentation and doesn’t require you to get an API key. Google Books is a huge database of books. The database lives on a computer somewhere else, called the Server. You, at home on your computer (Client), would like to see if you can find a book using Google’s software. Specifically, you want to find the book “Introduction to Quantum Mechanics” by David J. Griffiths. How will you find it? You will use a GET request. First, you need to know how to write the query. Here are a couple of rules: space = “+” use “?q=” to start the query use “intitle:” to search for a word in the title use “inauthor:” to search for a word in the author name separate everything else with “+” Okay, let’s get started: “?q=” to start the query “intitle:Introduction+intitle:to+intitle:Quantum+intitle:Mechanics” to search for our title “inauthor:David+inauthor:Griffiths” to search for our author Putting them all together: “?q=intitle:Introduction+intitle:to+intitle:Quantum+intitle:Mechanics+inauthor:David+inauthor:Griffiths” Now that we have made our query, we are ready to make our GET request. Below is the code you will need to do this. In the top right corner, you can select the language which you prefer to use. Language Bash Javascript R Python Copy curl -X GET https://www.googleapis.com/books/v1/volumes?q=intitle:Introduction+intitle:to+intitle:Quantum+intitle:Mechanics+inauthor:David+inauthor:Griffiths request = new XMLHttpRequest(); request.open('GET', 'https://www.googleapis.com/books/v1/volumes?q=intitle:Introduction+intitle:to+intitle:Quantum+intitle:Mechanics+inauthor:David+inauthor:Griffiths'); request.send(); library(httr) library(jsonlite) response = GET(url='https://www.googleapis.com/books/v1/volumes?q=intitle:Introduction+intitle:to+intitle:Quantum+intitle:Mechanics+inauthor:David+inauthor:Griffiths') import json import requests response = requests.get('https://www.googleapis.com/books/v1/volumes?q=intitle:Introduction+intitle:to+intitle:Quantum+intitle:Mechanics+inauthor:David+inauthor:Griffiths') If you are doing the Bash option, the results should print out automatically. For the other languages, we can print the response: Language Javascript R Python Copy console.log(request.status()); console.log(request.response()); print(response$status) rawUnicode = response$content text = rawToChar(rawUnicode) results = fromJSON(text) print(results) print(response.status_code) text = response.text results = json.loads(text) print(results) In printing the results, the status code should be “200,” and the printed text should be something like this: { &quot;kind&quot;: &quot;books#volumes&quot;, &quot;totalItems&quot;: 1, &quot;items&quot;: [ { &quot;kind&quot;: &quot;books#volume&quot;, &quot;id&quot;: &quot;0h-nDAAAQBAJ&quot;, &quot;etag&quot;: &quot;OTURZeInoRk&quot;, &quot;selfLink&quot;: &quot;https://www.googleapis.com/books/v1/volumes/0h-nDAAAQBAJ&quot;, &quot;volumeInfo&quot;: { &quot;title&quot;: &quot;Introduction to Quantum Mechanics&quot;, &quot;authors&quot;: [ &quot;David Griffiths&quot; ], &quot;publisher&quot;: &quot;Cambridge University Press&quot;, &quot;publishedDate&quot;: &quot;2016-08-31&quot;, &quot;description&quot;: &quot;This best-selling textbook teaches students how to do quantum mechanics and provides an insightful discussion of what it actually means.&quot;, &quot;industryIdentifiers&quot;: [ { &quot;type&quot;: &quot;ISBN_13&quot;, &quot;identifier&quot;: &quot;9781107179868&quot; }, { &quot;type&quot;: &quot;ISBN_10&quot;, &quot;identifier&quot;: &quot;1107179866&quot; } ], &quot;readingModes&quot;: { &quot;text&quot;: false, &quot;image&quot;: true }, &quot;pageCount&quot;: 465, &quot;printType&quot;: &quot;BOOK&quot;, &quot;categories&quot;: [ &quot;Science&quot; ], &quot;averageRating&quot;: 4.0, &quot;ratingsCount&quot;: 4, &quot;maturityRating&quot;: &quot;NOT_MATURE&quot;, &quot;allowAnonLogging&quot;: false, &quot;contentVersion&quot;: &quot;preview-1.0.0&quot;, &quot;panelizationSummary&quot;: { &quot;containsEpubBubbles&quot;: false, &quot;containsImageBubbles&quot;: false }, &quot;imageLinks&quot;: { &quot;smallThumbnail&quot;: &quot;http://books.google.com/books/content?id=0h-nDAAAQBAJ&amp;printsec=frontcover&amp;img=1&amp;zoom=5&amp;edge=curl&amp;source=gbs_api&quot;, &quot;thumbnail&quot;: &quot;http://books.google.com/books/content?id=0h-nDAAAQBAJ&amp;printsec=frontcover&amp;img=1&amp;zoom=1&amp;edge=curl&amp;source=gbs_api&quot; }, &quot;language&quot;: &quot;en&quot;, &quot;previewLink&quot;: &quot;http://books.google.ca/books?id=0h-nDAAAQBAJ&amp;printsec=frontcover&amp;dq=intitle:Introduction+intitle:to+intitle:Quantum+intitle:Mechanics+inauthor:David+inauthor:Griffiths&amp;hl=&amp;cd=1&amp;source=gbs_api&quot;, &quot;infoLink&quot;: &quot;http://books.google.ca/books?id=0h-nDAAAQBAJ&amp;dq=intitle:Introduction+intitle:to+intitle:Quantum+intitle:Mechanics+inauthor:David+inauthor:Griffiths&amp;hl=&amp;source=gbs_api&quot;, &quot;canonicalVolumeLink&quot;: &quot;https://books.google.com/books/about/Introduction_to_Quantum_Mechanics.html?hl=&amp;id=0h-nDAAAQBAJ&quot; }, &quot;saleInfo&quot;: { &quot;country&quot;: &quot;CA&quot;, &quot;saleability&quot;: &quot;NOT_FOR_SALE&quot;, &quot;isEbook&quot;: false }, &quot;accessInfo&quot;: { &quot;country&quot;: &quot;CA&quot;, &quot;viewability&quot;: &quot;PARTIAL&quot;, &quot;embeddable&quot;: true, &quot;publicDomain&quot;: false, &quot;textToSpeechPermission&quot;: &quot;ALLOWED&quot;, &quot;epub&quot;: { &quot;isAvailable&quot;: false }, &quot;pdf&quot;: { &quot;isAvailable&quot;: false }, &quot;webReaderLink&quot;: &quot;http://play.google.com/books/reader?id=0h-nDAAAQBAJ&amp;hl=&amp;printsec=frontcover&amp;source=gbs_api&quot;, &quot;accessViewStatus&quot;: &quot;SAMPLE&quot;, &quot;quoteSharingAllowed&quot;: false }, &quot;searchInfo&quot;: { &quot;textSnippet&quot;: &quot;This bestselling textbook teaches students how to do quantum mechanics and provides an insightful discussion of what it actually means.&quot; } } ] } Congrats! You have completed your first GET request! POST The POST call is a bit more complicated than the GET call. The primary difference is that for a POST call, you send data AND receive data. You probably have made a post on Facebook or Twitter or Instagram; those are examples of POST calls. Say you want to tweet “hello” on Twitter. You would send this data with a POST call to the Twitter API. The Twitter API would then add your new post, and will return a JSON object that looks something like this: { &quot;created_at&quot;: &quot;Wed Oct 10 20:19:24 +0000 2018&quot;, &quot;id&quot;: 1050118621198921700, &quot;id_str&quot;: &quot;1050118621198921728&quot;, &quot;text&quot;: &quot;To make room for more expression, we will now count all emojis as equal—including those with gender and skin t… https://t.co/MkGjXf9aXm&quot;, &quot;source&quot;: &quot;&lt;a href=&quot;http://twitter.com&quot; rel=&quot;nofollow&quot;&gt;Twitter Web Client&lt;/a&gt;&quot;, &quot;truncated&quot;: true, &quot;in_reply_to_status_id&quot;: null, &quot;in_reply_to_status_id_str&quot;: null, &quot;in_reply_to_user_id&quot;: null, &quot;in_reply_to_user_id_str&quot;: null, &quot;in_reply_to_screen_name&quot;: null, &quot;user&quot;: { &quot;id&quot;: 6253282, &quot;id_str&quot;: &quot;6253282&quot;, &quot;name&quot;: &quot;Twitter API&quot;, &quot;screen_name&quot;: &quot;TwitterAPI&quot;, &quot;location&quot;: &quot;San Francisco, CA&quot;, &quot;url&quot;: &quot;https://developer.twitter.com&quot;, &quot;description&quot;: &quot;The Real Twitter API. Tweets about API changes, service issues and our Developer Platform. Don&#39;t get an answer? It&#39;s on my website.&quot;, &quot;translator_type&quot;: &quot;null&quot;, &quot;derived&quot;: { &quot;locations&quot;: [ { &quot;country&quot;: &quot;United States&quot;, &quot;country_code&quot;: &quot;US&quot;, &quot;locality&quot;: &quot;San Francisco&quot;, &quot;region&quot;: &quot;California&quot;, &quot;sub_region&quot;: &quot;San Francisco County&quot;, &quot;full_name&quot;: &quot;San Francisco, California, United States&quot;, &quot;geo&quot;: { &quot;coordinates&quot;: [ -122.41942, 37.77493 ], &quot;type&quot;: &quot;point&quot; } } ] }, &quot;protected&quot;: false, &quot;verified&quot;: true, &quot;followers_count&quot;: 6172196, &quot;friends_count&quot;: 12, &quot;listed_count&quot;: 13003, &quot;favourites_count&quot;: 31, &quot;statuses_count&quot;: 3650, &quot;created_at&quot;: &quot;Wed May 23 06:01:13 +0000 2007&quot;, &quot;utc_offset&quot;: null, &quot;time_zone&quot;: null, &quot;geo_enabled&quot;: false, &quot;lang&quot;: &quot;en&quot;, &quot;contributors_enabled&quot;: false, &quot;is_translator&quot;: null, &quot;profile_background_color&quot;: &quot;null&quot;, &quot;profile_background_image_url&quot;: &quot;null&quot;, &quot;profile_background_image_url_https&quot;: &quot;null&quot;, &quot;profile_background_tile&quot;: null, &quot;profile_link_color&quot;: &quot;null&quot;, &quot;profile_sidebar_border_color&quot;: &quot;null&quot;, &quot;profile_sidebar_fill_color&quot;: &quot;null&quot;, &quot;profile_text_color&quot;: &quot;null&quot;, &quot;profile_use_background_image&quot;: null, &quot;profile_image_url&quot;: &quot;null&quot;, &quot;profile_image_url_https&quot;: &quot;https://pbs.twimg.com/profile_images/942858479592554497/BbazLO9L_normal.jpg&quot;, &quot;profile_banner_url&quot;: &quot;https://pbs.twimg.com/profile_banners/6253282/1497491515&quot;, &quot;default_profile&quot;: false, &quot;default_profile_image&quot;: false, &quot;following&quot;: null, &quot;follow_request_sent&quot;: null, &quot;notifications&quot;: null }, &quot;geo&quot;: null, &quot;coordinates&quot;: null, &quot;place&quot;: null, &quot;contributors&quot;: null, &quot;is_quote_status&quot;: false, &quot;extended_tweet&quot;: { &quot;full_text&quot;: &quot;To make room for more expression, we will now count all emojis as equal—including those with gender and skin tone modifiers 👍🏻👍🏽👍🏿. This is now reflected in Twitter-Text, our Open Source library. nnUsing Twitter-Text? See the forum post for detail: https://t.co/Nx1XZmRCXA&quot;, &quot;display_text_range&quot;: [ 0, 277 ], &quot;entities&quot;: { &quot;hashtags&quot;: [], &quot;urls&quot;: [ { &quot;url&quot;: &quot;https://t.co/Nx1XZmRCXA&quot;, &quot;expanded_url&quot;: &quot;https://twittercommunity.com/t/new-update-to-the-twitter-text-library-emoji-character-count/114607&quot;, &quot;display_url&quot;: &quot;twittercommunity.com/t/new-update-t…&quot;, &quot;unwound&quot;: { &quot;url&quot;: &quot;https://twittercommunity.com/t/new-update-to-the-twitter-text-library-emoji-character-count/114607&quot;, &quot;status&quot;: 200, &quot;title&quot;: &quot;New update to the Twitter-Text library: Emoji character count&quot;, &quot;description&quot;: &quot;Over the years, we have made several updates to the way that people can communicate on Twitter. One of the more notable changes made last year was to increase the number of characters per Tweet from 140 to 280 characters. Today, we continue to expand people’s ability to express themselves by announcing a change to the way that we count emojis. Due to the differences in the way written text and emojis are encoded, many emojis (including emojis where you can apply gender and skin tone) have count...&quot; }, &quot;indices&quot;: [ 254, 277 ] } ], &quot;user_mentions&quot;: [], &quot;symbols&quot;: [] } }, &quot;quote_count&quot;: 0, &quot;reply_count&quot;: 0, &quot;retweet_count&quot;: 0, &quot;favorite_count&quot;: 0, &quot;entities&quot;: { &quot;hashtags&quot;: [], &quot;urls&quot;: [ { &quot;url&quot;: &quot;https://t.co/MkGjXf9aXm&quot;, &quot;expanded_url&quot;: &quot;https://twitter.com/i/web/status/1050118621198921728&quot;, &quot;display_url&quot;: &quot;twitter.com/i/web/status/1…&quot;, &quot;indices&quot;: [ 117, 140 ] } ], &quot;user_mentions&quot;: [], &quot;symbols&quot;: [] }, &quot;favorited&quot;: false, &quot;retweeted&quot;: false, &quot;possibly_sensitive&quot;: false, &quot;filter_level&quot;: &quot;low&quot;, &quot;lang&quot;: &quot;en&quot;, } } Now, for the purpose of this tutorial, we won’t use the Twitter API or the Google Books API, because they require an authentication token to complete the POST requests. Basically, if you want to POST a tweet, Twitter needs to know that it is you asking to post on your account, and not someone else. However, getting an authentication token can take a bit of time, as you have to set up a developer account etc. In data science, sometimes a POST request looks a bit different than the Twitter POST request. For example, let’s say there is a machine learning algorithm which is able to tell you if a picture is a Cat or a Dog. This algorithm is on a Server somewhere else, and you want to use the API to check if your photo is a Cat or a Dog. This would also be an example of a POST request. You would send the data, which would be the picture, using a POST call. The API would communicate with the Server, and the algorithm would calculate if the picture was a Cat or a Dog. Then the algorithm would send back data, say a JSON file with the text “image: Cat”. Now you know that your image is a Cat! PUT The PUT request is similar to POST in that you can send and receive data. However, the PUT request is used less often. The reason for this is what computer scientists and mathematicians call “idempotency.” An action is idempotent if repeating the action results in the same end result. Still kind of complicated, right? Let’s do an example. The POST request is not idempotent. If you make a post on Twitter today, saying, “I love tacos!”, and then later on you make another post that says “I love tacos!”, both of those posts will stay on Twitter. The second post won’t erase the first post [even though people already know you love tacos]. You can post “I love tacos!” as many times as you want, and Twitter will just keep adding it to your status. On the other hand, the PUT request is idempotent. Diving in I have found it is often easiest to learn by example, so I’m going to walk through an example of how to use our PRISM API. If you don’t have much programming experience, or if you want to use Excel, I would recommend doing the API in Excel. Otherwise, you can choose your favourite programming language to get started: API in R API in Python API in Bash/Shell API in Javascript "],
["section-using-prism.html", "3 Using the PRISM API 3.1 Using the PRISM API in Excel 3.2 Using the PRISM API in R 3.3 Using the PRISM API in Python 3.4 Using the PRISM API in Bash/Shell 3.5 Using the PRISM API in Javascript", " 3 Using the PRISM API 3.1 Using the PRISM API in Excel 3.2 Using the PRISM API in R 3.3 Using the PRISM API in Python 3.4 Using the PRISM API in Bash/Shell 3.5 Using the PRISM API in Javascript "]
]
